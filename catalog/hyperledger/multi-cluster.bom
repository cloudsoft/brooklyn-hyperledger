brooklyn.catalog:
  version: 0.19.0-SNAPSHOT # BROOKLYN_HYPERLEDGER_VERSION

  publish:
    description: |
      Entities for a multi location Hyperledger Fabric cluster.
    license_code: APACHE-2.0
    icon_url: classpath://io.brooklyn.hyperledger:icon/hyperledger-fabric.png

  items:
    - id: hyperledger-fabric-multi-cluster-application
      description: |
        A Hyperledger Fabric cluster of a membership services node, a CLI node, a root
        validating peer node, and cluster(s) of validating peer nodes running in multiple
        locations.
      publish:
        license_code: APACHE-2.0
        overview: README.md
      name: "Hyperledger Fabric Multi-cluster"
      iconUrl: classpath://io.brooklyn.hyperledger:icon/hyperledger-fabric.png
      itemType: entity
      item:
        type: org.apache.brooklyn.entity.stock.BasicApplication

        brooklyn.parameters:
          - name: hyperledger.peers.per.location
            description: |
              The number of Hyperledger Fabric validating peer nodes to create in each
              location.
            type: integer
            default: 3
            constraints:
              - required
          - name: hyperledger.pbft.request.timeout
            description: |
              The number of seconds the PBFT plugin should wait when making requests.
            type: integer
            default: 120
            constraints:
              - required
          - name: hyperledger.app.timeout
            description: |
              The number of seconds the demo app should wait between deploy, invoke, and query
              steps.
            type: integer
            default: 180
            constraints:
              - required

        brooklyn.config:
          hyperledger.peers.per.location: 3
          hyperledger.pbft.request.timeout: 120
          hyperledger.app.timeout: 180

        brooklyn.children:
          - type: hyperledger-fabric-multi-cluster
            name: "hyperledger-fabric-multi-cluster"

    - id: hyperledger-fabric-multi-cluster
      item:
        name: "Hyperledger Fabric Multi-cluster"
        type: org.apache.brooklyn.entity.group.DynamicRegionsFabric
        id: my-hyperledger-fabric-cluster

        brooklyn.config:
          memberSpec:
            $brooklyn:entitySpec:
              type: hyperledger-vp-cluster-multi
              name: "hyperledger-vp-cluster"

        brooklyn.children:
          - type: hyperledger-services-host-multi
            name: "hyperledger-services-host"
          - type: hyperledger-validating-peer-host-multi
            id: my-hyperledger-root-node-multi
            name: "hyperledger-validating-peer-host"
            brooklyn.config:
              is.root.node: true
              latch.launch: $brooklyn:component("my-hyperledger-membersrvc-node-multi").attributeWhenReady("service.isUp")

    - id: hyperledger-services-host-multi
      description: |
        A Docker host running a Hyperledger Fabric Membership Services node
        and a sequence node.
      itemType: entity
      item:
        type: hyperledger-docker-engine
        name: "hyperledger-services-host"

        brooklyn.children:
          - type: hyperledger-membersrvc-node-multi
            id: my-hyperledger-membersrvc-node-multi
          - type: hyperledger-sequence-node
            id: my-hyperledger-sequence-node-multi

    - id: hyperledger-membersrvc-node-multi
      description: |
        A Hyperledger Fabric membership services node
      itemType: entity
      item:
        type: hyperledger-docker-container
        name: "hyperledger-membersrvc-node"

        brooklyn.config:
          latch.start: $brooklyn:component("my-hyperledger-sequence-node-multi").attributeWhenReady("service.isUp")

          install.command: |
            sudo docker pull hyperledger/fabric-membersrvc:${HYPERLEDGER_VERSION}

          launch.command: |
            nohup sudo docker run --name=membersrvc \
                --restart=always \
                -i \
                -p 7054:7054 \
                -e CORE_LOGGING_LEVEL=info \
                hyperledger/fabric-membersrvc:${HYPERLEDGER_VERSION} membersrvc >> ~/membersrvc.log 2>&1&

          checkRunning.command: |
            STATUS=$(sudo docker inspect -f {{.State.Running}} membersrvc)
            sudo service docker status && [ "${STATUS}" = "true" ]

        brooklyn.initializers:
          - type: org.apache.brooklyn.core.sensor.StaticSensor
            brooklyn.config:
              name: secret.keys
              targetType: java.lang.String
              static.value: "MwYpmSRjupbT;5wgHK9qqYaPy;vQelbRvja7cJ;9LKqKH5peurL;Pqh90CEW5juZ;FfdvDkAdY81P;QiXJgHyV4t7A;twoKZouEyLyB;BxP7QNh778gI;wu3F1EwJWHvQ"

    - id: hyperledger-cli-host-multi
      description: |
        A Docker host running a Hyperledger Fabric Membership Services CLI node.
      itemType: entity
      item:
        type: hyperledger-docker-engine
        name: "hyperledger-cli-host"

        brooklyn.children:
          - type: hyperledger-cli-node-multi
            id: my-hyperledger-cli-node-multi

    - id: hyperledger-cli-node-multi
      description: |
        A Hyperledger Fabric CLI node.
      itemType: entity
      item:
        type: hyperledger-docker-container
        name: "hyperledger-cli-node"

        brooklyn.config:
          shell.env:
            HYPERLEDGER_ROOT_NODE_ADDRESS: $brooklyn:component("my-hyperledger-root-node-multi").attributeWhenReady("host.address")
            HYPERLEDGER_MEMBERSRVC_NODE_ADDRESS: $brooklyn:component("my-hyperledger-membersrvc-node-multi").attributeWhenReady("host.address")
            HYPERLEDGER_APP_TIMEOUT: $brooklyn:config("hyperledger.app.timeout")
            HOST_ADDRESS: $brooklyn:attributeWhenReady("host.address")

          install.command: |
            sudo docker pull hyperledger/fabric-peer:${HYPERLEDGER_VERSION}
            sudo docker tag hyperledger/fabric-peer:${HYPERLEDGER_VERSION} hyperledger/fabric-baseimage:latest

          launch.command:  |
            nohup sudo docker run --name=cli \
                --restart=always \
                -i \
                -p 7051:7051 \
                -p 7052:7052 \
                -p 8080:8080 \
                -e CORE_VM_ENDPOINT=http://${HOST_ADDRESS}:${DOCKER_PORT} \
                -e CORE_PEER_ADDRESS=${HOST_ADDRESS}:7051 \
                -e CORE_PEER_ADDRESSAUTODETECT=false \
                -e CORE_SECURITY_ENABLED=true \
                -e CORE_SECURITY_PRIVACY=true \
                -e HYPERLEDGER_ROOT_NODE_ADDRESS=${HYPERLEDGER_ROOT_NODE_ADDRESS} \
                -e HYPERLEDGER_MEMBERSRVC_NODE_ADDRESS=${HYPERLEDGER_MEMBERSRVC_NODE_ADDRESS} \
                -e APP_HOME=/opt/gopath/src/github.com/hyperledger/fabric/examples/chaincode/go/asset_management/app \
                hyperledger/fabric-peer:${HYPERLEDGER_VERSION} /bin/bash -c \
                    "cd /opt/gopath/src/github.com/hyperledger/fabric/examples/chaincode/go/asset_management/app; \
                    cp /opt/gopath/src/github.com/hyperledger/fabric/peer/core.yaml .; \
                    sed -i \"s/0.0.0.0/${HYPERLEDGER_ROOT_NODE_ADDRESS}/g\" core.yaml; \
                    sed -i \"s/localhost/${HYPERLEDGER_MEMBERSRVC_NODE_ADDRESS}/g\" core.yaml; \
                    sed -i \"s/30/${HYPERLEDGER_APP_TIMEOUT}/g\" app.go; \
                    curl -k -so infiniteloop.sh https://raw.githubusercontent.com/hyperledger/fabric/v0.6.1-preview/scripts/infiniteloop.sh; \
                    chmod +x infiniteloop.sh; \
                    ./infiniteloop.sh" >> ~/cli.log 2>&1&

          checkRunning.command: |
            STATUS=$(sudo docker inspect -f {{.State.Running}} cli)
            sudo service docker status && [ "${STATUS}" = "true" ]

        brooklyn.initializers:
          - type: org.apache.brooklyn.core.effector.ssh.SshCommandEffector
            brooklyn.config:
              name: "Run Demo Application"
              description: "Runs the asset management demo application."

              command: |
                sudo docker exec -i cli bash '-c' 'cd ${APP_HOME} && go build && ./app' 2>&1

    - id: hyperledger-sequence-node
      description: |
        A lightweight HTTP server that issues sequential integer values.
      itemType: entity
      item:
        type: hyperledger-docker-container
        name: "hyperledger-sequence-node"
        id: hyperledger-sequence

        brooklyn.config:
          install.command: |
            sudo yum -y install python net-tools

          launch.command: |
            cat > sequence.py <<"END"
            from BaseHTTPServer import HTTPServer
            from BaseHTTPServer import BaseHTTPRequestHandler

            sequence = 0

            class MyRequestHandler (BaseHTTPRequestHandler) :

                def do_GET(self) :
                    global sequence

                    self.send_response(200)
                    self.send_header("Content-type:", "text/plain")
                    self.wfile.write("\n")

                    self.wfile.write(sequence)
                    sequence += 1

            server = HTTPServer(("", 9999), MyRequestHandler)

            server.serve_forever()
            END

            python sequence.py > sequence.out 2>&1 </dev/null & disown
            echo $! > ${PID_FILE}

          checkRunning.command: |
            sudo netstat -nl | grep 9999

          stop.command: |
            sudo kill -9 $(<${PID_FILE})

    - id: hyperledger-vp-cluster-multi
      description: |
        A cluster of Hyperledger Fabric validating peer nodes and a CLI node.
      name: "Hyperledger Fabric VP Cluster"
      itemType: entity
      item:
        type: org.apache.brooklyn.entity.stock.BasicApplication

        brooklyn.children:
          - type: hyperledger-vp-nodes-multi
            name: "hyperledger-vp-nodes"
          - type: hyperledger-cli-host-multi
            name: "hyperledger-cli-host"

    - id: hyperledger-vp-nodes-multi
      description: |
        A cluster of Hyperledger Fabric validating peer nodes.
      name: "Hyperledger Fabric VP Cluster"
      item:
        type: org.apache.brooklyn.entity.group.DynamicCluster

        brooklyn.config:
          initialSize: $brooklyn:config("hyperledger.peers.per.location")

          memberSpec:
            $brooklyn:entitySpec:
              type: hyperledger-validating-peer-host-multi
              name: "hyperledger-validating-peer-host"

              brooklyn.config:
                is.root.node: false
                latch.launch: $brooklyn:component("my-hyperledger-root-node-multi").attributeWhenReady("service.isUp")

        brooklyn.enrichers:
          - type: org.apache.brooklyn.enricher.stock.Aggregator
            brooklyn.config:
              uniqueTag: node-address-aggregator
              enricher.aggregator.excludeBlank: true
              enricher.aggregating.fromMembers: true
              enricher.sourceSensor: $brooklyn:sensor("host.address")
              enricher.targetSensor: $brooklyn:sensor("node.host.address.list")

    - id: hyperledger-validating-peer-host-multi
      description: |
        A Docker host running a Hyperledger Fabric validating peer node in a container
      itemType: entity
      item:
        type: hyperledger-docker-engine
        name: "hyperledger-validating-peer-host"

        brooklyn.children:
          - type: hyperledger-validating-peer-node-multi
            id: my-hyperledger-validating-peer-node-multi

    - id: hyperledger-validating-peer-node-multi
      description: |
        A Hyperledger Fabric validating peer node.
      itemType: entity
      item:
        type: hyperledger-docker-container
        name: "hyperledger-validating-peer-node"

        brooklyn.config:
          shell.env:
            IS_ROOT_NODE: $brooklyn:config("is.root.node")
            FABRIC_GROUP_MEMBERS_COUNT: $brooklyn:component("my-hyperledger-fabric-cluster").attributeWhenReady("group.members.count")
            HYPERLEDGER_ROOT_NODE_ADDRESS: $brooklyn:component("my-hyperledger-root-node-multi").attributeWhenReady("host.address")
            HYPERLEDGER_MEMBERSRVC_NODE_ADDRESS: $brooklyn:component("my-hyperledger-membersrvc-node-multi").attributeWhenReady("host.address")
            HYPERLEDGER_PBFT_REQUEST_TIMEOUT: $brooklyn:config("hyperledger.pbft.request.timeout")
            HYPERLEDGER_PEERS_PER_LOCATION: $brooklyn:config("hyperledger.peers.per.location")
            SECRET_KEYS: $brooklyn:component("my-hyperledger-membersrvc-node-multi").attributeWhenReady("secret.keys")
            HOST_ADDRESS: $brooklyn:attributeWhenReady("host.address")
            SEQ_HOST_ADDRESS: $brooklyn:component("my-hyperledger-sequence-node-multi").attributeWhenReady("host.address")

          files.install:
            "classpath://io.brooklyn.hyperledger:hyperledger/chaincode-request-templates/login-template.json": "login-template.json"
            "classpath://io.brooklyn.hyperledger:hyperledger/chaincode-request-templates/query-template.json": "query-template.json"
            "classpath://io.brooklyn.hyperledger:hyperledger/chaincode-request-templates/query-template-security.json": "query-template-security.json"

          install.command: |
            sudo docker pull hyperledger/fabric-peer:${HYPERLEDGER_VERSION}
            sudo docker tag hyperledger/fabric-peer:${HYPERLEDGER_VERSION} hyperledger/fabric-baseimage:latest

          launch.command: |
            echo ${HOST_ADDRESS} > host-address

            CLUSTER_INDEX=$(curl http://${SEQ_HOST_ADDRESS}:9999/)
            HYPERLEDGER_PEER_ID=vp${CLUSTER_INDEX}
            echo ${HYPERLEDGER_PEER_ID} > hyperledger.peer.id

            IFS=';' read -ra SECRET_KEYS_ARRAY <<< "${SECRET_KEYS}"
            SECRET=${SECRET_KEYS_ARRAY[${CLUSTER_INDEX}]}

            HYPERLEDGER_CLUSTER_TOTAL_SIZE=$((1 + (${FABRIC_GROUP_MEMBERS_COUNT} - 2) * ${HYPERLEDGER_PEERS_PER_LOCATION}))

            # Additional arguments for peer nodes
            if [ ${IS_ROOT_NODE} == "false" ]; then
              PEER_NODE_ARG="-e CORE_PEER_DISCOVERY_ROOTNODE=${HYPERLEDGER_ROOT_NODE_ADDRESS}:7051"
            fi

            nohup sudo docker run --name=${HYPERLEDGER_PEER_ID} \
                --restart=always \
                -i \
                -p 7050:7050 \
                -p 7051:7051 \
                -p 7052:7052 \
                -p 7053:7053 \
                -e CORE_VM_ENDPOINT=http://${HOST_ADDRESS}:${DOCKER_PORT} \
                -e CORE_PEER_ID=${HYPERLEDGER_PEER_ID} \
                ${PEER_NODE_ARG} \
                -e CORE_PEER_ADDRESS=${HOST_ADDRESS}:7051 \
                -e CORE_PEER_ADDRESSAUTODETECT=false \
                -e CORE_PEER_NETWORKID=dev \
                -e CORE_LOGGING_LEVEL=info \
                -e CORE_SECURITY_ENABLED=true \
                -e CORE_SECURITY_PRIVACY=true \
                -e CORE_SECURITY_ENROLLID=test_${HYPERLEDGER_PEER_ID} \
                -e CORE_SECURITY_ENROLLSECRET=${SECRET} \
                -e CORE_PEER_PKI_ECA_PADDR=${HYPERLEDGER_MEMBERSRVC_NODE_ADDRESS}:7054 \
                -e CORE_PEER_PKI_TCA_PADDR=${HYPERLEDGER_MEMBERSRVC_NODE_ADDRESS}:7054 \
                -e CORE_PEER_PKI_TLSCA_PADDR=${HYPERLEDGER_MEMBERSRVC_NODE_ADDRESS}:7054 \
                -e CORE_PEER_VALIDATOR_CONSENSUS_PLUGIN=pbft \
                -e CORE_PBFT_GENERAL_MODE=batch \
                -e CORE_PBFT_GENERAL_N=${HYPERLEDGER_CLUSTER_TOTAL_SIZE} \
                -e CORE_PBFT_GENERAL_TIMEOUT_REQUEST=${HYPERLEDGER_PBFT_REQUEST_TIMEOUT}s \
                hyperledger/fabric-peer:${HYPERLEDGER_VERSION} peer node start >> ~/${HYPERLEDGER_PEER_ID}.log 2>&1&

          checkRunning.command: |
            STATUS=$(sudo docker inspect -f {{.State.Running}} $(cat hyperledger.peer.id))
            sudo service docker status && [ "${STATUS}" = "true" ]

        brooklyn.initializers:
          - type: org.apache.brooklyn.core.effector.ssh.SshCommandEffector
            brooklyn.config:
              name: "Login User"
              description: "Logs in a registered user"
              shell.env:
                INSTALL_DIR: $brooklyn:attributeWhenReady("install.dir")
              command: |
                timestamp=$(date +%s)
                rest_endpoint=http://$(cat host-address):7050/registrar

                cp ${INSTALL_DIR}/login-template.json login-${timestamp}.json
                sed -i "s/ENROLL_ID/${enrollId}/g" login-${timestamp}.json
                sed -i "s/ENROLL_SECRET/${enrollSecret}/g" login-${timestamp}.json

                curl -H "Content-Type: application/json" -X POST -d @login-${timestamp}.json ${rest_endpoint}
              parameters:
                enrollId:
                  description: "The username"
                enrollSecret:
                  description: "The password"

          - type: org.apache.brooklyn.core.effector.ssh.SshCommandEffector
            brooklyn.config:
              name: "Check Login"
              description: "Checks if a user is logged in"
              command: |
                rest_endpoint=http://$(cat host-address):7050/registrar/${enrollId}
                curl ${rest_endpoint}
              parameters:
                enrollId:
                  description: "The username"

          - type: org.apache.brooklyn.core.effector.ssh.SshCommandEffector
            brooklyn.config:
              name: "Query Chaincode"
              description: "Queries an example chaincode"
              shell.env:
                INSTALL_DIR: $brooklyn:attributeWhenReady("install.dir")
              command: |
                timestamp=$(date +%s)
                rest_endpoint=http://$(cat host-address):7050/chaincode

                cp ${INSTALL_DIR}/query-template-security.json query-${timestamp}-security.json
                sed -i "s/METHOD/query/g" query-${timestamp}-security.json
                sed -i "s/NAME/${name}/g" query-${timestamp}-security.json
                sed -i "s/FUNCTION/${function}/g" query-${timestamp}-security.json
                sed -i "s/ARGUMENTS/${args}/g" query-${timestamp}-security.json
                sed -i "s/METADATA/${metadata}/g" query-${timestamp}-security.json
                sed -i "s/SECURE_CONTEXT/${secureContext}/g" query-${timestamp}-security.json
                sed -i "s/TRANSACTION_ID/${timestamp}/g" query-${timestamp}-security.json

                curl -H "Content-Type: application/json" -X POST -d @query-${timestamp}-security.json ${rest_endpoint}
              parameters:
                name:
                  description: "The chaincode container name (hash)"
                function:
                  description: "The function to run"
                  defaultValue: "query"
                args:
                  description: "Arguments for the function"
                  defaultValue: "[]"
                metadata:
                  description: "Metadata for the query call"
                secureContext:
                  description: "The registered user"

          - type: org.apache.brooklyn.core.effector.ssh.SshCommandEffector
            brooklyn.config:
              name: "List Peers"
              description: "Retrieve information about the network of peer nodes comprising the blockchain network"
              command: |
                rest_endpoint=http://$(cat host-address):7050/network/peers
                curl ${rest_endpoint}
